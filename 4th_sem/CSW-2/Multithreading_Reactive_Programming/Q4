Q4.  Implement a program where two threads communicate with each other using wait() and
notify() methods. One thread should print even numbers, and the other should print odd numbers in
sequence.

//code

package Multithreading;

public class Q4 {
    private final Object lock = new Object();
    private final int max;
    private int count = 1;

    public Q4(int max) {
        this.max = max;
    }

    public void printEven() {
        synchronized (lock) {
            while (count < max) {
                while (count % 2 != 0) {
                    try {
                        lock.wait();
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                }
                System.out.println("Even: " + count);
                count++;
                lock.notify();
            }
        }
    }

    public void printOdd() {
        synchronized (lock) {
            while (count < max) {
                while (count % 2 == 0) {
                    try {
                        lock.wait();
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                }
                System.out.println("Odd: " + count);
                count++;
                lock.notify();
            }
        }
    }

    public static void main(String[] args) {
        Q4 printer = new Q4(20);

        Thread evenThread = new Thread(printer::printEven);
        Thread oddThread = new Thread(printer::printOdd);

        evenThread.start();
        oddThread.start();
    }
}

//output

Odd: 1
Even: 2
Odd: 3
Even: 4
Odd: 5
Even: 6
Odd: 7
Even: 8
Odd: 9
Even: 10
Odd: 11
Even: 12
Odd: 13
Even: 14
Odd: 15
Even: 16
Odd: 17
Even: 18
Odd: 19
Even: 20
