10 Write a Java program to traverse a graph using breadth-first search (BFS) and provide 
the final output of the code. (Use the ArrayDeque collection).

//code
package Data_Structure_Assignment;

import java.util.*;

public class Q10 {
    private int V; // Number of vertices
    private LinkedList<Integer> adj[]; // Adjacency list representation of the graph

    // Constructor
    Q10(int v) {
        V = v;
        adj = new LinkedList[v];
        for (int i=0; i<v; ++i)
            adj[i] = new LinkedList();
    }
    // Function to add an edge into the graph
    void addEdge(int v, int w) {
        adj[v].add(w);
    }
    // Function to perform BFS traversal from a given source vertex
    void BFS(int s) {
        boolean visited[] = new boolean[V];
        // Create a queue for BFS
        ArrayDeque<Integer> queue = new ArrayDeque<Integer>();
        // Mark the current node as visited and enqueue it
        visited[s] = true;
        queue.add(s);
        while (queue.size() != 0) {
            // Dequeue a vertex from queue and print it
            s = queue.poll();
            System.out.print(s + " ");
            // Get all adjacent vertices of the dequeued vertex s
            // If an adjacent vertex has not been visited, then mark it visited and enqueue it
            Iterator<Integer> i = adj[s].listIterator();
            while (i.hasNext()) {
                int n = i.next();
                if (!visited[n]) {
                    visited[n] = true;
                    queue.add(n);
                }
            }
        }
    }
    public static void main(String args[]) {
        Q10 g = new Q10(4);
        g.addEdge(0, 1);
        g.addEdge(0, 2);
        g.addEdge(1, 2);
        g.addEdge(2, 0);
        g.addEdge(2, 3);
        g.addEdge(3, 3);
        System.out.println("BFS traversal starting from vertex 2:");
        g.BFS(2);
    }
}

//output
BFS traversal starting from vertex 2:
2 0 3 1 
