Q5. Construct a binary search tree (BST) from the given array of elements: {10, 20, 30, 40, 50, 
60, 70, 80, 90, 100}. Include a method called 'CreateTree' to construct the binary search tree 
from a sorted array. This method takes an array of integers as input and constructs the tree 
recursively using a binary search algorithm.

//code

class BNode {
    int data;
    BNode left, right;

    public BNode(int data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}
class BST {
    BNode root;
    public BST() {
        this.root = null;
    }
    public BNode createTree(int[] arr) {
        return TreeRec(arr, 0, arr.length - 1);
    }
    private BNode TreeRec(int[] arr, int start, int end) {
        if (start > end) {
            return null;
        }

        int mid = (start + end) / 2;
        BNode node = new BNode2(arr[mid]);

        node.left = TreeRec(arr, start, mid - 1);
        node.right = TreeRec(arr, mid + 1, end);

        return node;
    }

    public void inorderTraversal(BNode node) {
        if (node != null) {
            inorderTraversal(node.left);
            System.out.print(node.data + " ");
            inorderTraversal(node.right);
        }
    }
}
public class Q5 {
    public static void main(String[] args) {
        int[] arr = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};

        BST bst = new BST3();
        bst.root = bst.createTree(arr);

        System.out.println("Inorder traversal of the constructed BST:");
        bst.inorderTraversal(bst.root);
    }
}

//output
Inorder traversal of the constructed BST:
10 20 30 40 50 60 70 80 90 100 

