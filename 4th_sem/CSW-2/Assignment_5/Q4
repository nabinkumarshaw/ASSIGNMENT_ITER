4. Implement a Java program that reads a file path from the command line argument and 
attempts to read the contents of the file. If the file path is null or points to a non-existent 
file, throw a custom FileNotFoundException. If the file exists but cannot be read due 
to permission issues, throw a custom FileReadPermissionException. Your task is to 
create these custom exception classes and handle them appropriately in your program.

//code 


class FilenotFoundException extends Exception{
    FilenotFoundException(String s){
        System.out.println(s);
    }
}
class FilereadPermissionException extends Exception{
    FilereadPermissionException(String s){
        System.out.println(s);
    }
}

public class Q4 {
    public static void main(String[] args) {
        if (args.length == 0) {
            System.err.println("Usage: java FileContentReader <file_path>");
            return;
        }
        String filedata=args[0];
        try{
            if(filedata==null){
                throw new FilenotFoundException("File is not able to excess as it is null");
            }
        }
        catch(FilenotFoundException e){
            System.out.println(e);
        }
        try{
            if (filedata=="") {
                throw new FilereadPermissionException("Permission denied. Cannot read file: " + filedata);
            }
        }
        catch(Exception e){
            System.out.println(e);
        }
    }
}



/**
 * OUTPUT
 * Usage: java FileContentReader <file_path>
 */
