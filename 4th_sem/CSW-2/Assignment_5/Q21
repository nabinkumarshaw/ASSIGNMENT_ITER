Q21)Design a Java program that performs matrix operations such as addition, multiplication, 
and transpose. Introduce scenarios, where accessing elements beyond the bounds of the 
matrix results in ArrayIndexOutOfBoundsException. Your task is to handle these 
exceptions effectively and provide meaningful error messages indicating the nature of 
the exception

//code
package Assignment_5;

public class Q21 {
    public static void main(String[] args) {
        int[][] mat1 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        int[][] mat2 = {{9, 8, 7}, {6, 5, 4}, {3, 2, 1}};

        System.out.println("Matrix 1:");
        printMatrix(mat1);
        System.out.println("Matrix 2:");
        printMatrix(mat2);

        try {
            int[][] addresult = addMatrices(mat1, mat2);
            System.out.println("Result of matrix addition:");
            printMatrix(addresult);
        } catch (IllegalArgumentException e) {
            System.out.println("Matrix addition error: " + e.getMessage());
        }

        try {
            int[][] mul_result = mul_matrices(mat1, mat2);
            System.out.println("Result of matrix multiplication:");
            printMatrix(mul_result);
        } catch (IllegalArgumentException e) {
            System.out.println("Matrix multiplication error: " + e.getMessage());
        }

        System.out.println("Transpose of matrix 1:");
        int[][] trans_result = transposeMatrix(mat1);
        printMatrix(trans_result);
    }

    public static int[][] addMatrices(int[][] mat1, int[][] mat2) {
        if (mat1.length != mat2.length || mat1[0].length != mat2[0].length) {
            throw new IllegalArgumentException("Matrices required same dimensions for addition");
        }
        int rows = mat1.length;
        int cols = mat1[0].length;
        int[][] result = new int[rows][cols];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result[i][j] = mat1[i][j] + mat2[i][j];
            }
        }
        return result;
    }

    public static int[][] mul_matrices(int[][] mat1, int[][] mat2) {
        if (mat1[0].length != mat2.length) {
            throw new IllegalArgumentException("Number of columns in the first matrix must be equal to the number of rows in the second matrix for multiplication");
        }
        int rows = mat1.length;
        int cols = mat2[0].length;
        int[][] result = new int[rows][cols];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                for (int k = 0; k < mat1[0].length; k++) {
                    result[i][j] += mat1[i][k] * mat2[k][j];
                }
            }
        }
        return result;
    }

    public static int[][] transposeMatrix(int[][] mat) {
        int rows = mat.length;
        int cols = mat[0].length;
        int[][] transpose = new int[cols][rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                transpose[i][j] = mat[j][i];
            }
        }
        return transpose;
    }

    public static void printMatrix(int[][] matrix) {
        for (int[] row : matrix) {
            for (int value : row) {
                System.out.print(value + " ");
            }
            System.out.println();
        }
    }
}

//output
Matrix 1:
1 2 3 
4 5 6 
7 8 9 
Matrix 2:
9 8 7 
6 5 4 
3 2 1 
Result of matrix addition:
10 10 10 
10 10 10 
10 10 10 
Result of matrix multiplication:
30 24 18 
84 69 54 
138 114 90 
Transpose of matrix 1:
1 4 7 
2 5 8 
3 6 9 
